{"@context":"http://schema.org","@type":"CreativeWork","name":"Getting started","text":"\u003ch1\u003eGetting started\u003c/h1\u003e\n\n\u003ch2\u003eInstalling API Platform Core\u003c/h2\u003e\n\n\u003cp\u003eIf you are starting a new project, the easiest way to get API Platform up is to install the \u003ca href=\"../distribution/index.jsonld\"\u003eAPI Platform Standard Edition\u003c/a\u003e.\nIt ships with the API Platform Core library integrated with \u003ca href=\"https://symfony.com\"\u003ethe Symfony framework\u003c/a\u003e, \u003ca href=\"../schema-generator/\"\u003ethe schema generator\u003c/a\u003e,\n\u003ca href=\"www.doctrine-project.org\"\u003eDoctrine ORM\u003c/a\u003e, \u003ca href=\"https://github.com/nelmio/NelmioApiDocBundle\"\u003eNelmioApiDocBundle\u003c/a\u003e, \u003ca href=\"https://github.com/nelmio/NelmioCorsBundle\"\u003eNelmioCorsBundle\u003c/a\u003e\nand \u003ca href=\"http://behat.org\"\u003eBehat\u003c/a\u003e.\nBasically, it is a Symfony edition packaged with the best tools to develop a REST API and sensitive default settings.\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can use \u003ca href=\"http://getcomposer.org\"\u003eComposer\u003c/a\u003e to install the standalone bundle in an existing Symfony project:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecomposer require api-platform/core\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, update your \u003ccode\u003eapp/config/AppKernel.php\u003c/code\u003e file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// app/config/AppKernel.php\n\npublic function registerBundles()\n{\n    $bundles = [\n        // ...\n        new ApiPlatform\\Core\\Bridge\\Symfony\\Bundle\\ApiPlatformBundle(),\n        // ...\n    ];\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRegister the routes of our API by adding the following lines to \u003ccode\u003eapp/config/routing.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/routing.yml\n\napi:\n    resource: \u0026#39;.\u0026#39;\n    type:     \u0026#39;api_platform\u0026#39;\n    prefix:   \u0026#39;/api\u0026#39; # Optional\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere is no mandatory configuration options although \u003ca href=\"configuration.jsonld\"\u003emany settings are available\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBefore Reading this Documentation\u003c/h2\u003e\n\n\u003cp\u003eIf you haven’t read it already, take a look at \u003ca href=\"../distribution/getting-started.jsonld\"\u003ethe “Creating your first API with API Platform, in a few minutes” guide\u003c/a\u003e.\nThis tutorial covers basic concepts required to understand how API Platform works including how it implements the REST pattern\nand what \u003ca href=\"http://json-ld.org/\"\u003eJSON-LD\u003c/a\u003e and \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra\u003c/a\u003e formats are.\u003c/p\u003e\n\n\u003ch2\u003eMapping the Entities\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform Core is able to automatically expose entities mapped as “API resources” through a REST API supporting CRUD\noperations.\nTo expose your entities, you can use Docblock annotations, XML and YAML configuration files.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of entities mapped using annotations which will be exposed trough a REST API:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Product.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ApiResource\n * @ORM\\Entity\n */\nclass Product // The class name will be used to name exposed resources\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    public $id;\n\n    /**\n     * @param string $name A name property - this description will be avaliable in the API documentation too.\n     *\n     * @ORM\\Column\n     * @Assert\\NotBlank\n     */\n    public $name;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * An offer from my shop - this description will be automatically extracted form the PHPDoc to document the API.\n *\n * @ApiResource(iri=\u0026#34;http://schema.org/Offer\u0026#34;)\n * @ORM\\Entity\n */\nclass Offer\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    public $id;\n\n    /**\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     */\n    public $description;\n\n    /**\n     * @ORM\\Column(type=\u0026#34;float\u0026#34;)\n     * @Assert\\NotBlank\n     * @Assert\\Range(min=0, minMessage=\u0026#34;The price must be superior to 0.\u0026#34;)\n     * @Assert\\Type(type=\u0026#34;float\u0026#34;)\n     */\n    public $price;\n\n    /**\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;Product\u0026#34;)\n     */\n    public $product;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt is the minimal configuration required to expose \u003ccode\u003eProduct\u003c/code\u003e and \u003ccode\u003eOffer\u003c/code\u003e entities as JSON-LD documents trough an hypermedia\nweb API.\u003c/p\u003e\n\n\u003cp\u003eIf you are familiar with the Symfony ecosystem, you noticed that entity classes are also mapped with Doctrine ORM annotations\nand validation constraints from \u003ca href=\"http://symfony.com/doc/current/book/validation.html\"\u003ethe Symfony Validator Component\u003c/a\u003e.\nThis isn’t mandatory. You can use \u003ca href=\"data-providers.jsonld\"\u003eyour preferred persistence\u003c/a\u003e and \u003ca href=\"the-event-system.jsonld\"\u003evalidation\u003c/a\u003e systems.\nHowever, API Platform Core has built-in support for those library and is able to use them without requiring any specific\ncode or configuration to automatically persist and validate your data. They are good default and we encourage you to use\nthem unless you know what you are doing.\u003c/p\u003e\n\n\u003cp\u003eThanks to the mapping done previously, API Platform Core will automatically register the following REST \u003ca href=\"operations.jsonld\"\u003eoperations\u003c/a\u003e\nfor resources of the product type:\u003c/p\u003e\n\n\u003cp\u003eProduct\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMethod\u003c/th\u003e\n\u003cth\u003eURL\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e/products\u003c/td\u003e\n\u003ctd\u003eRetrieve the (paged) collection\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003ePOST\u003c/td\u003e\n\u003ctd\u003e/products\u003c/td\u003e\n\u003ctd\u003eCreate a new product\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eGET\u003c/td\u003e\n\u003ctd\u003e/products/{id}\u003c/td\u003e\n\u003ctd\u003eRetrieve a product\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003ePUT\u003c/td\u003e\n\u003ctd\u003e/products/{id}\u003c/td\u003e\n\u003ctd\u003eUpdate a product\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eDELETE\u003c/td\u003e\n\u003ctd\u003e/products/{id}\u003c/td\u003e\n\u003ctd\u003eDelete a product\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe same operations are available for the offer method (routes will start with the \u003ccode\u003e/offers\u003c/code\u003e pattern).\nRoutes prefixes are built by pluralizing the name of the mapped entity class.\nIt is also possible to override the naming convention using \u003ca href=\"operation-path-naming.jsonld\"\u003eoperation path namings\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs an alternative to annotations, you can map entity classes using XML or YAML:\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e# src/AppBundle/Resources/config/api_resources.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt;\n\u0026lt;resources\u0026gt;\n    \u0026lt;resource class=\u0026#34;AppBundle\\Entity\\Product\u0026#34; /\u0026gt;\n    \u0026lt;resource\n        class=\u0026#34;AppBundle\\Entity\\Offer\u0026#34;\n        shortName=\u0026#34;Offer\u0026#34; \u0026lt;!-- optional --\u0026gt;\n        description=\u0026#34;An offer form my shop\u0026#34; \u0026lt;!-- optional --\u0026gt;\n        iri=\u0026#34;http://schema.org/Offer\u0026#34; \u0026lt;!-- optional --\u0026gt;\n    /\u0026gt;\n\u0026lt;/resources\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# src/AppBundle/Resources/config/api_resources.yml\n\nresources:\n    product:\n        class: \u0026#39;AppBundle\\Entity\\Product\u0026#39;\n    offer:\n        class: \u0026#39;AppBundle\\Entity\\Offer\u0026#39;\n        shortName: \u0026#39;Offer\u0026#39; # optional        # optional\n        description: \u0026#39;An offer from my shop\u0026#39; # optional\n        iri: \u0026#39;http://schema.org/Offer\u0026#39;       # optional\n        attributes:                          # optional\n            pagination_items_per_page: 25    # optional\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eYou’re done!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou now have a fully featured API exposing your entities.\nRun the Symfony app (\u003ccode\u003ebin/console server:run\u003c/code\u003e) and browse the API entrypoint at \u003ccode\u003ehttp://localhost:8000/api\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInteract with the API using a REST client (we recommend \u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e) or an Hydra aware application\n(you should give a try to \u003ca href=\"https://github.com/lanthaler/HydraConsole\"\u003eHydra Console\u003c/a\u003e). Take\na look at the usage examples in \u003ca href=\"/features/\"\u003ethe \u003ccode\u003efeatures\u003c/code\u003e directory\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"index.jsonld\"\u003eIntroduction\u003c/a\u003e\nNext chapter: \u003ca href=\"configuration.jsonld\"\u003eConfiguration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Teoh Han Hui","email":"teohhanhui@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Ener-Getick","email":"egetick@gmail.com"},{"@type":"Person","Name":"Stefan Schüller","email":"sschueller@techdroid.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"clementtalleu","email":"clement@la-cooperative-des-tilleuls.com"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-10-17T14:55:50+02:00"}