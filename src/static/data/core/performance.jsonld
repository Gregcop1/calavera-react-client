{"@context":"http://schema.org","@type":"CreativeWork","name":"Performance","text":"\u003ch1\u003ePerformance\u003c/h1\u003e\n\n\u003ch2\u003eEnabling the Metadata Cache\u003c/h2\u003e\n\n\u003cp\u003eComputing metadata used by the bundle is a costly operation. Fortunately, metadata can be computed once and then cached.\nAPI Platform internally uses a \u003ca href=\"http://www.php-fig.org/psr/psr-6/\"\u003ePSR-6\u003c/a\u003e cache. If the Symfony Cache Component is available\n(the default in the official distribution), it automatically enables the support for the best cache adapter available.\u003c/p\u003e\n\n\u003cp\u003eBest performance is achieved using \u003ca href=\"https://github.com/krakjoe/apcu\"\u003eAPCu\u003c/a\u003e. Be sure to have the APCu extension installed\non your production server, API Platform will automatically use it.\u003c/p\u003e\n\n\u003ch2\u003eUsing PPM (PHP-PM)\u003c/h2\u003e\n\n\u003cp\u003eResponse time of the API can be improved up to 15x by using \u003ca href=\"https://github.com/php-pm/php-pm\"\u003ePHP Process Manager\u003c/a\u003e. If\nyou want to use it on your project, follow the documentation dedicated to Symfony on the PPM website.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that PPM is still in an early stage of development and can cause issues in production.\u003c/p\u003e\n\n\u003ch2\u003eDoctrine Queries and Indexes\u003c/h2\u003e\n\n\u003ch3\u003eSearch Filter\u003c/h3\u003e\n\n\u003cp\u003eWhen using the \u003ccode\u003eSearchFilter\u003c/code\u003e and case insensivity, Doctrine will use the \u003ccode\u003eLOWER\u003c/code\u003e SQL function. Depending on your\ndriver, you may want to carefully index it by using a \u003ca href=\"http://use-the-index-luke.com/sql/where-clause/functions/case-insensitive-search\"\u003efunction-based\nindex\u003c/a\u003e or it will impact performanc\nwith a huge collection. \u003ca href=\"http://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning\"\u003eHere are some examples to index LIKE\nfilters\u003c/a\u003e depending on your\ndatabase driver.\u003c/p\u003e\n\n\u003ch3\u003eUnserialized Properties Hydratation\u003c/h3\u003e\n\n\u003cp\u003eEven though we’re selecting only partial results (serialized properties) with Doctrine, it’ll try to hydrate some\nrelations with lazy joins (for example \u003ccode\u003eOneToOne\u003c/code\u003e relations). It’s recommended to take a look at the Symfony Profiler,\ncheck what the generated SQL queries are doing in background and see if those may impact performance.\u003c/p\u003e\n\n\u003cp\u003eTo force Doctrine to only hydrate partial values you need to use the\n\u003ca href=\"http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/dql-doctrine-query-language.html#query-hints\"\u003e\u003ccode\u003eQuery::HINT_FORCE_PARTIAL_LOAD\u003c/code\u003e\u003c/a\u003e.\nBe careful, using this query hint will force the use of partial selects. Some properties might not be available even if\nyou expect them. If you want to be sure that Doctrine fetches them, use eager joins and make sure that properties are\nserializable.\u003c/p\u003e\n\n\u003cp\u003eTo do this in API Platform you’d have to build a\n\u003ca href=\"https://github.com/api-platform/core/blob/master/src/Bridge/Doctrine/Orm/Extension/QueryResultCollectionExtensionInterface.php\"\u003e\u003ccode\u003eQueryResultCollectionExtension\u003c/code\u003e\u003c/a\u003e\nor a\n\u003ca href=\"https://github.com/api-platform/core/blob/master/src/Bridge/Doctrine/Orm/Extension/QueryResultItemExtensionInterface.php\"\u003e\u003ccode\u003eQueryResultItemExtension\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, let’s decorate the existing\n\u003ca href=\"https://github.com/api-platform/core/blob/master/src/Bridge/Doctrine/Orm/Extension/PaginationExtension.php\"\u003e\u003ccode\u003ePaginationExtension\u003c/code\u003e\u003c/a\u003e\nby setting the query hint:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Doctrine/Orm/Extension/QueryHintPaginationExtension.php\n\nnamespace AppBundle\\Doctrine\\Orm\\Extension;\n\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryResultCollectionExtensionInterface;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Paginator;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Util\\QueryChecker;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Util\\QueryNameGeneratorInterface;\nuse Doctrine\\Common\\Persistence\\ManagerRegistry;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Doctrine\\ORM\\Tools\\Pagination\\Paginator as DoctrineOrmPaginator;\nuse Doctrine\\ORM\\Query;\n\nfinal class QueryHintPaginationExtension implements QueryResultCollectionExtensionInterface\n{\n    private $managerRegistry;\n    private $decorated;\n\n    public function __construct(ManagerRegistry $managerRegistry, QueryResultCollectionExtensionInterface $decorated) {\n        $this-\u0026gt;managerRegistry = $managerRegistry;\n        $this-\u0026gt;decorated = $decorated;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function supportsResult(string $resourceClass, string $operationName = null) : bool\n    {\n        return $this-\u0026gt;decorated-\u0026gt;supportsResult($resourceClass, $operationName);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getResult(QueryBuilder $queryBuilder)\n    {\n        $query = $queryBuilder-\u0026gt;getQuery();\n        // This forces doctrine to not lazy load entities\n        $query-\u0026gt;setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);\n\n        $doctrineOrmPaginator = new DoctrineOrmPaginator($query, $this-\u0026gt;useFetchJoinCollection($queryBuilder));\n        $doctrineOrmPaginator-\u0026gt;setUseOutputWalkers($this-\u0026gt;useOutputWalkers($queryBuilder));\n\n        return new Paginator($doctrineOrmPaginator);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function applyToCollection(QueryBuilder $queryBuilder, QueryNameGeneratorInterface $queryNameGenerator, string $resourceClass, string $operationName = null)\n    {\n        return $this-\u0026gt;decorated-\u0026gt;applyToCollection($queryBuilder, $queryNameGenerator, $resourceClass, $operationName);\n    }\n\n    /**\n     * Determines whether the Paginator should fetch join collections, if the root entity uses composite identifiers it should not.\n     *\n     * @see https://github.com/doctrine/doctrine2/issues/2910\n     *\n     * @param QueryBuilder $queryBuilder\n     *\n     * @return bool\n     */\n    private function useFetchJoinCollection(QueryBuilder $queryBuilder): bool\n    {\n        return !QueryChecker::hasRootEntityWithCompositeIdentifier($queryBuilder, $this-\u0026gt;managerRegistry);\n    }\n\n    /**\n     * Determines whether output walkers should be used.\n     *\n     * @param QueryBuilder $queryBuilder\n     *\n     * @return bool\n     */\n    private function useOutputWalkers(QueryBuilder $queryBuilder) : bool\n    {\n        /*\n         * \u0026#34;Cannot count query that uses a HAVING clause. Use the output walkers for pagination\u0026#34;\n         *\n         * @see https://github.com/doctrine/doctrine2/blob/900b55d16afdcdeb5100d435a7166d3a425b9873/lib/Doctrine/ORM/Tools/Pagination/CountWalker.php#L50\n         */\n        if (QueryChecker::hasHavingClause($queryBuilder)) {\n            return true;\n        }\n\n        /*\n         * \u0026#34;Paginating an entity with foreign key as identifier only works when using the Output Walkers. Call Paginator#setUseOutputWalkers(true) before iterating the paginator.\u0026#34;\n         *\n         * @see https://github.com/doctrine/doctrine2/blob/900b55d16afdcdeb5100d435a7166d3a425b9873/lib/Doctrine/ORM/Tools/Pagination/LimitSubqueryWalker.php#L87\n         */\n        if (QueryChecker::hasRootEntityWithForeignKeyIdentifier($queryBuilder, $this-\u0026gt;managerRegistry)) {\n            return true;\n        }\n\n        /*\n         * \u0026#34;Cannot select distinct identifiers from query with LIMIT and ORDER BY on a column from a fetch joined to-many association. Use output walkers.\u0026#34;\n         *\n         * @see https://github.com/doctrine/doctrine2/blob/900b55d16afdcdeb5100d435a7166d3a425b9873/lib/Doctrine/ORM/Tools/Pagination/LimitSubqueryWalker.php#L149\n         */\n        if (\n            QueryChecker::hasMaxResults($queryBuilder) \u0026amp;\u0026amp;\n            QueryChecker::hasOrderByOnToManyJoin($queryBuilder, $this-\u0026gt;managerRegistry)\n        ) {\n            return true;\n        }\n\n        /*\n         * When using composite identifiers pagination will need Output walkers\n         */\n        if (QueryChecker::hasRootEntityWithCompositeIdentifier($queryBuilder, $this-\u0026gt;managerRegistry)) {\n            return true;\n        }\n\n        // Disable output walkers by default (performance)\n        return false;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe service definition:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\nservices:\n    app.doctrine.orm.query_extension.pagination_hint:\n        class: \u0026#39;AppBundle\\Doctrine\\Orm\\Extension\\QueryHintPaginationExtension\u0026#39;\n        decorates: api_platform.doctrine.orm.query_extension.pagination\n        arguments: [\u0026#39;@doctrine\u0026#39;, \u0026#39;@api_platform.doctrine.orm.query_extension.pagination_hint.inner\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTo alter the \u003ccode\u003eQuery\u003c/code\u003e object on an item data provider, we can also create an \u003ccode\u003eQueryHintExtension\u003c/code\u003e which will alter the result:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Doctrine/Orm/Extension/QueryHintExtension.php\n\nnamespace AppBundle\\Doctrine\\Orm\\Extension;\n\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryResultItemExtensionInterface;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Util\\QueryNameGeneratorInterface;\nuse Doctrine\\ORM\\Query;\nuse Doctrine\\ORM\\QueryBuilder;\n\nclass QueryHintExtension implements QueryResultItemExtensionInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function applyToItem(QueryBuilder $queryBuilder, QueryNameGeneratorInterface $queryNameGenerator, string $resourceClass, array $identifiers, string $operationName = null);\n    {\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function supportsResult(string $resourceClass, string $operationName = null) : bool\n    {\n        return true;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getResult(QueryBuilder $queryBuilder)\n    {\n        $query = $queryBuilder-\u0026gt;getQuery();\n        $query-\u0026gt;setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);\n\n        return $query-\u0026gt;getResult();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe service definition:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    api_platform.doctrine.orm.query_extension.hint:\n        class: \u0026#39;AppBundle\\Doctrine\\Orm\\Extension\\QueryHintExtension\u0026#39;\n        tags:\n            - {name: api_platform.doctrine.orm.query_extension.item}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"security.jsonld\"\u003eSecurity\u003c/a\u003e\nNext chapter: \u003ca href=\"operation-path-naming.jsonld\"\u003eOperation Path Naming\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","Name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","Name":"Teoh Han Hui","email":"teohhanhui@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Ener-Getick","email":"egetick@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Antoine Bluchet","email":"soyuka@users.noreply.github.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-06-19T21:41:17+02:00","dateModified":"2016-10-10T13:23:03+02:00"}