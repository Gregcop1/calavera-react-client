{"@context":"http://schema.org","@type":"CreativeWork","name":"Testing and Specifying the API","text":"\u003ch1\u003eTesting and Specifying the API\u003c/h1\u003e\n\n\u003cp\u003eA set of useful tools to specify and test your API are pre-configured in the API Platform distribution:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://phpunit.de/\"\u003ePHPUnit\u003c/a\u003e allows to cover your classes with unit tests and to write functional tests thanks to his\nSymfony integration.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://docs.behat.org/\"\u003eBehat\u003c/a\u003e (a \u003ca href=\"http://en.wikipedia.org/wiki/Behavior-driven_development\"\u003eBehavior-driven development\u003c/a\u003e\nframework) and its \u003ca href=\"https://github.com/Behatch/contexts\"\u003eBehatch extension\u003c/a\u003e (a set of contexts dedicated to REST API and\nJSON documents) are convenient to specify and test your API: write the API specification as user stories and in natural\nlanguage then execute these scenarios against the application to validate its behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTake a look at \u003ca href=\"https://symfony.com/doc/current/testing.html\"\u003ethe Symfony documentation about testing\u003c/a\u003e to learn how to use\nPHPUnit in your API Platform project.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of a \u003ca href=\"http://docs.behat.org/en/latest/user_guide/gherkin.html\"\u003eGherkin\u003c/a\u003e feature file specifying the behavior\nof \u003ca href=\"index.jsonld\"\u003ethe bookstore API we created in the tutorial\u003c/a\u003e. Thanks to Behatch, this feature file can be executed against\nthe API without having to write a single line of PHP.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-gherkin\"\u003e# features/books.feature\n\nFeature: Manage books and their reviews\n  In order to manage books and their reviews\n  As a client software developer\n  I need to be able to retrieve, create, update and delete them trough the API.\n\n  # the \u0026#34;@createSchema\u0026#34; annotation provided by API Platform creates a temporary SQLite database for testing the API\n  @createSchema\n  Scenario: Create a book\n    When I add \u0026#34;Content-Type\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I add \u0026#34;Accept\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I send a \u0026#34;POST\u0026#34; request to \u0026#34;/books\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;isbn\u0026#34;: \u0026#34;9781782164104\u0026#34;,\n      \u0026#34;title\u0026#34;: \u0026#34;Persistence in PHP with the Doctrine ORM\u0026#34;,\n      \u0026#34;description\u0026#34;: \u0026#34;This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;KÃ©vin Dunglas\u0026#34;,\n      \u0026#34;publicationDate\u0026#34;: \u0026#34;2013-12-01\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json; charset=utf-8\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Book\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/books/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n      \u0026#34;isbn\u0026#34;: \u0026#34;9781782164104\u0026#34;,\n      \u0026#34;title\u0026#34;: \u0026#34;Persistence in PHP with the Doctrine ORM\u0026#34;,\n      \u0026#34;description\u0026#34;: \u0026#34;This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;K\\u00e9vin Dunglas\u0026#34;,\n      \u0026#34;publicationDate\u0026#34;: \u0026#34;2013-12-01T00:00:00+00:00\u0026#34;,\n      \u0026#34;reviews\u0026#34;: []\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Retrieve the book list\n    When I add \u0026#34;Accept\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I send a \u0026#34;GET\u0026#34; request to \u0026#34;/books\u0026#34;\n    Then the response status code should be 200\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json; charset=utf-8\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Book\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/books\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;hydra:Collection\u0026#34;,\n      \u0026#34;hydra:member\u0026#34;: [\n        {\n          \u0026#34;@id\u0026#34;: \u0026#34;/books/1\u0026#34;,\n          \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n          \u0026#34;isbn\u0026#34;: \u0026#34;9781782164104\u0026#34;,\n          \u0026#34;title\u0026#34;: \u0026#34;Persistence in PHP with the Doctrine ORM\u0026#34;,\n          \u0026#34;description\u0026#34;: \u0026#34;This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\u0026#34;,\n          \u0026#34;author\u0026#34;: \u0026#34;K\\u00e9vin Dunglas\u0026#34;,\n          \u0026#34;publicationDate\u0026#34;: \u0026#34;2013-12-01T00:00:00+00:00\u0026#34;,\n          \u0026#34;reviews\u0026#34;: []\n        }\n      ],\n      \u0026#34;hydra:totalItems\u0026#34;: 1\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Throw errors when a post is invalid\n    When I add \u0026#34;Content-Type\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I add \u0026#34;Accept\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I send a \u0026#34;POST\u0026#34; request to \u0026#34;/books\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;isbn\u0026#34;: \u0026#34;1312\u0026#34;,\n      \u0026#34;title\u0026#34;: \u0026#34;\u0026#34;,\n      \u0026#34;description\u0026#34;: \u0026#34;Yo!\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;Me!\u0026#34;,\n      \u0026#34;publicationDate\u0026#34;: \u0026#34;2016-01-01\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 400\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json; charset=utf-8\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/ConstraintViolationList\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;ConstraintViolationList\u0026#34;,\n      \u0026#34;hydra:title\u0026#34;: \u0026#34;An error occurred\u0026#34;,\n      \u0026#34;hydra:description\u0026#34;: \u0026#34;isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.\\ntitle: This value should not be blank.\u0026#34;,\n      \u0026#34;violations\u0026#34;: [\n        {\n          \u0026#34;propertyPath\u0026#34;: \u0026#34;isbn\u0026#34;,\n          \u0026#34;message\u0026#34;: \u0026#34;This value is neither a valid ISBN-10 nor a valid ISBN-13.\u0026#34;\n        },\n        {\n          \u0026#34;propertyPath\u0026#34;: \u0026#34;title\u0026#34;,\n          \u0026#34;message\u0026#34;: \u0026#34;This value should not be blank.\u0026#34;\n        }\n      ]\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  # The \u0026#34;@dropSchema\u0026#34; annotation must be added on the last scenario of the feature file to drop the temporary SQLite database\n  @dropSchema\n    Scenario: Add a review\n    When I add \u0026#34;Content-Type\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    When I add \u0026#34;Accept\u0026#34; header equal to \u0026#34;application/ld+json\u0026#34;\n    And I send a \u0026#34;POST\u0026#34; request to \u0026#34;/reviews\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;rating\u0026#34;: 5,\n      \u0026#34;body\u0026#34;: \u0026#34;Must have!\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;Foo Bar\u0026#34;,\n      \u0026#34;publicationDate\u0026#34;: \u0026#34;2016-01-01\u0026#34;,\n      \u0026#34;book\u0026#34;: \u0026#34;/books/1\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json; charset=utf-8\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Review\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/reviews/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;Review\u0026#34;,\n      \u0026#34;rating\u0026#34;: 5,\n      \u0026#34;body\u0026#34;: \u0026#34;Must have!\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;Foo Bar\u0026#34;,\n      \u0026#34;publicationDate\u0026#34;: \u0026#34;2016-01-01T00:00:00+00:00\u0026#34;,\n      \u0026#34;book\u0026#34;: \u0026#34;/books/1\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe API Platform flavor of Behat also comes with a temporary SQLite database dedicated to tests. It works out of the box.\u003c/p\u003e\n\n\u003cp\u003eJust run \u003ccode\u003edocker-compose run web vendor/bin/behat\u003c/code\u003e and everything should be green:\u003c/p\u003e\n\n\u003cp\u003eYour Linked Data API is now specified and tested thanks to Behat!\u003c/p\u003e\n\n\u003cp\u003eYou may also be interested by those alternative testing tools (not included in the API Platform distribution):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.getpostman.com/docs/writing_tests\"\u003ePostman tests\u003c/a\u003e (proprietary): create functional test for your API Platform project\nusing a nice UI, benefit from \u003ca href=\"https://www.getpostman.com/docs/importing_swagger\"\u003ethe Swagger integration\u003c/a\u003e and run tests\ntest in the CI using \u003ca href=\"https://github.com/postmanlabs/newman\"\u003enewman\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/coduo/php-matcher\"\u003ePHP Matcher\u003c/a\u003e: the Swiss Army knife of JSON document testing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"index.jsonld\"\u003eCreating your First API with API Platform, in 5 Minutes\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-09-30T10:15:33+02:00","dateModified":"2016-09-30T12:32:52+02:00"}