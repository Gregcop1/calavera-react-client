{"@context":"http://schema.org","@type":"CreativeWork","name":"Creating your First API with API Platform, in 5 Minutes","text":"\u003ch1\u003eCreating your First API with API Platform, in 5 Minutes\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://api-platform.com\"\u003eAPI Platform\u003c/a\u003e is one of the most efficient framework out there to create web APIs. It makes it\neasy to start creating APIs with the support of industry-leading open standards, while giving you the flexibility to build\ncomplex features.\nTo discover the basics, we will create an API to manage a bookshop.\u003c/p\u003e\n\n\u003cp\u003eIn a few minutes and just 2 steps, we will create a fully featured API:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInstall API Platform\u003c/li\u003e\n\u003cli\u003eHandcraft the API data model as \u003cem\u003ePlain Old PHP Objects\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAPI Platform uses these model classes to expose a web API having a ton of built-in features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecreating, retrieving, updating and deleting (CRUD) resources\u003c/li\u003e\n\u003cli\u003edata validation\u003c/li\u003e\n\u003cli\u003epagination\u003c/li\u003e\n\u003cli\u003efiltering\u003c/li\u003e\n\u003cli\u003esorting\u003c/li\u003e\n\u003cli\u003ea nice UI and machine-readable documentation (\u003ca href=\"https://swagger.io\"\u003eSwagger/OpenAPI\u003c/a\u003e, \u003ca href=\"http://hydra-cg.com\"\u003eHydra\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003ehypermedia/\u003ca href=\"https://en.wikipedia.org/wiki/HATEOAS\"\u003eHATEOAS\u003c/a\u003e and content negotiation support (\u003ca href=\"http://json-ld.org\"\u003eJSON-LD\u003c/a\u003e,\n\u003ca href=\"http://blog.stateless.co/post/13296666138/json-linking-with-hal\"\u003eHAL\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eauthentication (\u003ca href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\"\u003eBasic HTTP\u003c/a\u003e, cookies as well as \u003ca href=\"https://jwt.io/\"\u003eJWT\u003c/a\u003e\nand \u003ca href=\"https://oauth.net/\"\u003eOAuth\u003c/a\u003e through extensions)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\"\u003eCORS headers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003esecurity (tested against \u003ca href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\"\u003eOWASP recommendations\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eHTTP caching\u003c/li\u003e\n\u003cli\u003eand basically everything needed to build modern APIs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOne more thing, before we start: API Platform is built on top of \u003ca href=\"https://symfony.com\"\u003ethe Symfony framework\u003c/a\u003e. API Platform\nis compatible with most \u003ca href=\"https://symfony.com/blog/the-30-most-useful-symfony-bundles-and-making-them-even-better\"\u003eSymfony bundles\u003c/a\u003e\n(plugins) and benefits from the numerous extensions points provided by this rock-solid foundation (events, DIC…).\nAdding features like custom, service-oriented, API endpoints, JWT or OAuth authentication, HTTP caching, mail sending or\nasynchronous jobs to your APIs is very straightforward.\u003c/p\u003e\n\n\u003ch2\u003eInstalling the framework\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform is shipped with a \u003ca href=\"https://docker.com\"\u003eDocker\u003c/a\u003e setup that makes it easy to get a containerized development\nenvironment up and running. This setup contains an image pre-configured with PHP 7, Apache and everything needed to run API\nPlatform and a MySQL image to host the database.\u003c/p\u003e\n\n\u003cp\u003eAs an alternative to Docker, API Platform can also be installed using \u003ca href=\"https://getcomposer.org/\"\u003eComposer\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ composer create-project api-platform/api-platform bookshop-api\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eStart by \u003ca href=\"https://api-platform.com/download\"\u003edownloading the API Platform Standard Edition archive\u003c/a\u003e and extract its content.\nThe resulting directory contains an empty API Platform project structure. You will add your own code and configuration inside\nit.\nThen, if you do not already have Docker on your computer, \u003ca href=\"https://www.docker.com/products/overview#/install_the_platform\"\u003eit’s the right time to install it\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOpen a terminal, and navigate to the directory containing your project skeleton. Then, run the following command to start\nApache and MySQL using \u003ca href=\"https://docs.docker.com/compose/\"\u003eDocker Compose\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ docker-compose up\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe first time you start the containers, Docker downloads and builds images for you. It will take some time, but don’t worry,\nthis is done only once. Starting servers will then be lightning fast.\u003c/p\u003e\n\n\u003cp\u003eProject’s files are automatically shared between your local host machine and the container thanks to a pre-configured \u003ca href=\"https://docs.docker.com/engine/tutorials/dockervolumes/\"\u003eDocker\nvolume\u003c/a\u003e. It means that you can edit files of your project locally\nusing your IDE or code editor, they will be transparently taken into account in the container.\nSpeaking about IDEs, our favorite software to develop API Platform apps is \u003ca href=\"https://www.jetbrains.com/phpstorm/\"\u003ePHPStorm\u003c/a\u003e\nwith its awesome \u003ca href=\"https://confluence.jetbrains.com/display/PhpStorm/Getting+Started+-+Symfony+Development+using+PhpStorm\"\u003eSymfony\u003c/a\u003e\nand \u003ca href=\"https://plugins.jetbrains.com/plugin/7320\"\u003ePHP annotations\u003c/a\u003e plugins. Give them a try, you’ll got auto-completion for\nalmost everything.\u003c/p\u003e\n\n\u003cp\u003eNow, in another shell, install the project’s PHP dependencies:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ docker-compose run web composer install --no-interaction\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003eweb\u003c/code\u003e container is where your project stands. Prefixing a command by \u003ccode\u003edocker-compose run web\u003c/code\u003e allows to execute the\ngiven command in the container. You may want \u003ca href=\"http://www.linfo.org/alias.html\"\u003eto create an alias\u003c/a\u003e to easily run commands\ninside the container. Here, we are installing libraries required by the project using the \u003ccode\u003ecomposer\u003c/code\u003e tool included in the\nAPI Platform image.\u003c/p\u003e\n\n\u003cp\u003eThe API Platform Standard Edition comes with a dummy entity for test purpose: \u003ccode\u003esrc/AppBundle/Entity/Foo.php\u003c/code\u003e. We will remove\nit later, but for now, create the related database table:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003edocker-compose run web bin/console doctrine:schema:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you’re used to the PHP ecosystem, you probably guessed that this test entity uses the industry-leading \u003ca href=\"http://www.doctrine-project.org/projects/orm.html\"\u003eDoctrine ORM\u003c/a\u003e\nlibrary as persistence system.\nAPI Platform is 100% independent of the persistence system and you can use the one(s) that best suit(s) your needs (like\na NoSQL database or a remote web service).\nAPI Platform even supports using several persistence systems together in the same project.\u003c/p\u003e\n\n\u003cp\u003eHowever, Doctrine ORM is definitely the easiest way to persist and query data in an API Platform project thanks to a bridge\nincluded in the Standard Edition. This Doctrine ORM bridge is optimized for performance and development convenience. Doctrine\nORM and its bridge supports major RDBMS including MySQL, PostgreSQL, SQLite, SQL Server and MariaDB.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003ehttp://localhost\u003c/code\u003e with your favorite web browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/swagger-ui-1.png\" alt=\"Swagger UI integration in API Platform\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eAPI Platform exposes a description of the API in the Swagger format. It also integrates Swagger UI, a nice interface rendering\nthe API documentation. Click on an operation to display its details. You can also send requests to the API directly from the UI.\nTry to create a new \u003cem\u003eFoo\u003c/em\u003e resource using the \u003ccode\u003ePOST\u003c/code\u003e operation, then access it using the \u003ccode\u003eGET\u003c/code\u003e operation and, finally, delete\nit by executing the \u003ccode\u003eDELETE\u003c/code\u003e operation.\nIf you access any API URL using a web browser, API Platform detects it (using the \u003ccode\u003eAccept\u003c/code\u003e HTTP header) and displays the\ncorresponding API request in the UI. Open \u003ccode\u003ehttp://localhost/foos\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/swagger-ui-2.png\" alt=\"Request detail in the UI\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you want to access the raw data, you have two alternatives:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd the correct \u003ccode\u003eAccept\u003c/code\u003e header (or don’t set any \u003ccode\u003eAccept\u003c/code\u003e header at all and API Platform will default to JSON-LD) - preferred\nwhen writing API clients\u003c/li\u003e\n\u003cli\u003eAdd the format format you want as the extension of the resource - for debug purpose only\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor instance, go to \u003ccode\u003ehttp://localhost/foos.jsonld\u003c/code\u003e to retrieve the list of \u003ccode\u003eFoo\u003c/code\u003e resources in JSON-LD or \u003ccode\u003ehttp://localhost/foos.json\u003c/code\u003e\nto retrieve data in raw JSON.\u003c/p\u003e\n\n\u003cp\u003eOf course, you can also use your favorite HTTP client to query the API. We strongly recommend to use \u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e.\nIt works perfectly well with API Platform, also has native Swagger support, allows to easily write functional tests and\nhas very good team collaboration features.\u003c/p\u003e\n\n\u003ch2\u003eCreating the model\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform is now 100% functional. Let’s create our own data model.\nOur bookshop API will start simple. It will be composed of a \u003ccode\u003eBook\u003c/code\u003e resource type and a \u003ccode\u003eReview\u003c/code\u003e one.\u003c/p\u003e\n\n\u003cp\u003eBooks have an id, an ISBN number, a title, a description, an author, a publication date and are related to a list of reviews.\nReviews have an id, a rating (between 0 and 5), a body, an author, a publication date and are related to one book.\u003c/p\u003e\n\n\u003cp\u003eLet’s describe this data model as a set of Plain Old PHP Objects (POPO) and map it to database’s tables using annotations\nprovided by the Doctrine ORM:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * A book.\n *\n * @ORM\\Entity\n */\nclass Book\n{\n    /**\n     * @var int The id of this book.\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var string|null The ISBN number if this book (or null if doesn\u0026#39;t have one).\n     *\n     * @ORM\\Column(nullable=true)\n     */\n    private $isbn;\n\n    /**\n     * @var string The title of this book.\n     *\n     * @ORM\\Column\n     */\n    private $title;\n\n    /**\n     * @var string The description of this book.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     */\n    private $description;\n\n    /**\n     * @var string The author of this book.\n     *\n     * @ORM\\Column\n     */\n    private $author;\n\n    /**\n     * @var \\DateTimeInterface The publication date of this book.\n     *\n     * @ORM\\Column(type=\u0026#34;datetime\u0026#34;)\n     */\n    private $publicationDate;\n\n    /**\n     * @var Review[] Available reviews for this book.\n     *\n     * @ORM\\OneToMany(targetEntity=\u0026#34;Review\u0026#34;, mappedBy=\u0026#34;book\u0026#34;)\n     */\n    private $reviews;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Review.php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * A review of a book.\n *\n * @ORM\\Entity\n */\nclass Review\n{\n    /**\n     * @var int The id of this review.\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var int The rating of this review (between 0 and 5).\n     *\n     * @ORM\\Column(type=\u0026#34;smallint\u0026#34;)\n     */\n    private $rating;\n\n    /**\n     * @var string the body of the review.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     */\n    private $body;\n\n    /**\n     * @var string The author of the review.\n     *\n     * @ORM\\Column\n     */\n    private $author;\n\n    /**\n     * @var \\DateTimeInterface The date of publication of this review.\n     *\n     * @ORM\\Column(type=\u0026#34;datetime\u0026#34;)\n     */\n    private $publicationDate;\n\n    /**\n     * @var Book The book this review is about.\n     *\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;Book\u0026#34;, inversedBy=\u0026#34;reviews\u0026#34;)\n     */\n    private $book;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs you can see there are two typical PHP objects with the corresponding PHPDoc (note that entities’s and properties’s descriptions\nincluded in their PHPDoc will appear in the API documentation).\u003c/p\u003e\n\n\u003cp\u003eDoctrine’s annotations map these entities to tables in the MySQL database. Annotations are convenient as\nthey allow grouping the code and the configuration but, if you want to decouple classes from their metadata, you can switch\nto XML or YAML mappings. They are supported as well.\u003c/p\u003e\n\n\u003cp\u003eLearn more about how to map entities with the Doctrine ORM in \u003ca href=\"http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html\"\u003ethe project’s official documentation\u003c/a\u003e\nor in Kévin’s book “\u003ca href=\"https://www.amazon.fr/gp/product/B00HEGSKYQ/ref=as_li_tl?ie=UTF8\u0026amp;camp=1642\u0026amp;creative=6746\u0026amp;creativeASIN=B00HEGSKYQ\u0026amp;linkCode=as2\u0026amp;tag=kevidung-21\"\u003ePersistence in PHP with the Doctrine ORM\u003c/a\u003e”.\u003c/p\u003e\n\n\u003cp\u003eAs we used private properties (but API Platform as well as Doctrine can also work with public ones), we need to create the\ncorresponding accessor methods. Run the following command or use the code generation feature of your IDE to generate them:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ docker-compose run web bin/console doctrine:generate:entities AppBundle\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen, delete the file \u003ccode\u003esrc/AppBundle/Entity/Foo.php\u003c/code\u003e, this demo entity isn’t useful anymore.\nFinally, tell Doctrine to sync the database’s tables structure with our new data model:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ docker-compose run web bin/console doctrine:schema:update --force\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe now have a working data model that you can persist and query. To create an API endpoint with CRUD capabilities corresponding\nto an entity class, we just have to mark it with an annotation called \u003ccode\u003e@ApiResource\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * A book.\n *\n * @ApiResource\n * @ORM\\Entity\n */\nclass Book\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Entity.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * A review of a book.\n *\n * @ApiResource\n * @ORM\\Entity\n */\nclass Review\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eOur API is (almost) ready!\u003c/strong\u003e\nBrowse \u003ccode\u003ehttp://localhost/app_dev.php\u003c/code\u003e to load the development environment (including the awesome \u003ca href=\"https://symfony.com/blog/new-in-symfony-2-8-redesigned-profiler\"\u003eSymfony profiler\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eOperations available for our 2 resources types appear in the UI.\u003c/p\u003e\n\n\u003cp\u003eClick on the \u003ccode\u003ePOST\u003c/code\u003e operation of the \u003ccode\u003eBook\u003c/code\u003e resource type and send the following JSON document as request body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;isbn\u0026#34;: \u0026#34;9781782164104\u0026#34;,\n  \u0026#34;title\u0026#34;: \u0026#34;Persistence in PHP with the Doctrine ORM\u0026#34;,\n  \u0026#34;description\u0026#34;: \u0026#34;This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;Kévin Dunglas\u0026#34;,\n  \u0026#34;publicationDate\u0026#34;: \u0026#34;2013-12-01\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou just saved a new book resource through the bookshop API! API Platform automatically transforms the JSON document to\nan instance of the corresponding PHP entity class and uses Doctrine ORM to persist it in the database.\u003c/p\u003e\n\n\u003cp\u003eBy default, the API supports \u003ccode\u003eGET\u003c/code\u003e (retrieve, on collections and items), \u003ccode\u003ePOST\u003c/code\u003e (create), \u003ccode\u003ePUT\u003c/code\u003e (update) and \u003ccode\u003eDELETE\u003c/code\u003e (self-explaining)\nHTTP methods. You are not limited to the built-in operations. You can \u003ca href=\"../core/operations.jsonld#enabling-and-disabling-operations\"\u003eadd new custom operations\u003c/a\u003e\n(\u003ccode\u003ePATCH\u003c/code\u003e operations, sub-resources…) or \u003ca href=\"../core/operations.jsonld#creating-custom-operations-and-controllers\"\u003edisable the ones you don’t want\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry the \u003ccode\u003eGET\u003c/code\u003e operation on the collection. The book we added appears. When the collection will contain more than 30 items,\nthe pagination will automatically show up, \u003ca href=\"../core/pagination.jsonld\"\u003eand this is entirely configurable\u003c/a\u003e. You may be interested\nin \u003ca href=\"../core/filters.jsonld\"\u003eadding some filters and adding sorts to the collection\u003c/a\u003e as well.\u003c/p\u003e\n\n\u003cp\u003eYou may have notice that some keys start by the \u003ccode\u003e@\u003c/code\u003e symbol in the generated JSON response (\u003ccode\u003e@id\u003c/code\u003e, \u003ccode\u003e@type\u003c/code\u003e, \u003ccode\u003e@context\u003c/code\u003e…)?\nAPI Platform comes with a full support of the \u003ca href=\"http://json-ld.org/\"\u003eJSON-LD\u003c/a\u003e format (and its \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra\u003c/a\u003e\nextension). It allows to build smart clients, with auto-discoverability capabilities (take a look at \u003ca href=\"http://www.markus-lanthaler.com/hydra/console/\"\u003eHydra console\u003c/a\u003e)\nand is very useful for open data, SEO and interoperability when \u003ca href=\"http://blog.schema.org/2013/06/schemaorg-and-json-ld.html\"\u003eused with open vocabularies such as Schema.org\u003c/a\u003e.\nJSON-LD enables a lot of awesome advanced features (like \u003ca href=\"https://developers.google.com/search/docs/guides/intro-structured-data\"\u003egiving access to Google to your structured data\u003c/a\u003e\nor consuming APIs with \u003ca href=\"https://jena.apache.org/documentation/io/#formats\"\u003eApache Jena\u003c/a\u003e).\nWe think that it’s the best default format for a new API. However, API Platform natively \u003ca href=\"../core/content-negotiation.jsonld\"\u003esupports many other formats\u003c/a\u003e\nincluding \u003ca href=\"http://stateless.co/hal_specification.html\"\u003eHAL\u003c/a\u003e, raw \u003ca href=\"http://www.json.org/\"\u003eJSON\u003c/a\u003e, \u003ca href=\"https://www.w3.org/XML/\"\u003eXML\u003c/a\u003e\n(experimental) and even \u003ca href=\"http://yaml.org/\"\u003eYAML\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Comma-separated_values\"\u003eCSV\u003c/a\u003e (if you\nuse Symfony 3.2+).\nIt’s up to you to choose which format to enable and to use by default. You can also easily \u003ca href=\"../core/content-negotiation.jsonld\"\u003eadd support for other formats\u003c/a\u003e\nif you need to.\u003c/p\u003e\n\n\u003cp\u003eNow, add a review for this book using the \u003ccode\u003ePOST\u003c/code\u003e operation for the \u003ccode\u003eReview\u003c/code\u003e resource:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;book\u0026#34;: \u0026#34;/books/1\u0026#34;,\n    \u0026#34;rating\u0026#34;: 5,\n    \u0026#34;body\u0026#34;: \u0026#34;Interesting book!\u0026#34;,\n    \u0026#34;author\u0026#34;: \u0026#34;Kévin\u0026#34;,\n    \u0026#34;publicationDate\u0026#34;: \u0026#34;September 21, 2016\u0026#34;,\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere are two interesting things to mention about this request:\u003c/p\u003e\n\n\u003cp\u003eFirst, we learned how to work with relations. In a hypermedia API, every resource is identified by an (unique) \u003ca href=\"https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier\"\u003eIRI\u003c/a\u003e.\nAn URL is a valid IRI, and it’s what API Platform uses. The \u003ccode\u003e@id\u003c/code\u003e property of every JSON-LD document contains the IRI identifying\nit. You can use this IRI to reference this document from other documents. In the previous request, we used the IRI of the\nbook we created earlier to link it with the \u003ccode\u003eReview\u003c/code\u003e we were creating. API Platform is smart enough to deal with IRIs.\nBy the way, you may want to \u003ca href=\"../core/serialization-groups-and-relations.jsonld\"\u003eembed documents\u003c/a\u003e instead of referencing them\n(e.g. to reduce the number of HTTP requests).\u003c/p\u003e\n\n\u003cp\u003eThe other interesting thing is how API Platform handles dates (the \u003ccode\u003epublicationDate\u003c/code\u003e property). API Platform understands\n\u003ca href=\"http://php.net/manual/en/datetime.formats.date.php\"\u003eany date format supported by PHP\u003c/a\u003e. In production we strongly recommend\nto use the format specified by the \u003ca href=\"http://tools.ietf.org/html/rfc3339\"\u003eRFC 3339\u003c/a\u003e, but, as you can see, most common formats\nincluding \u003ccode\u003eSeptember 21, 2016\u003c/code\u003e can be used.\u003c/p\u003e\n\n\u003cp\u003eTo summarize, if you want to expose any entity you just have to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ePut it in the \u003ccode\u003eEntity\u003c/code\u003e directory of a bundle\u003c/li\u003e\n\u003cli\u003eIf you use Doctrine, map it with the database\u003c/li\u003e\n\u003cli\u003eMark it with the \u003ccode\u003e@ApiPlatform\\Core\\Annotation\\ApiResource\u003c/code\u003e annotation\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHow can it be more easy?!\u003c/p\u003e\n\n\u003ch2\u003eValidating Data\u003c/h2\u003e\n\n\u003cp\u003eNow try to add another book by issuing a \u003ccode\u003ePOST\u003c/code\u003e request to \u003ccode\u003e/books\u003c/code\u003e with the following body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;isbn\u0026#34;: \u0026#34;2851840053\u0026#34;,\n  \u0026#34;description\u0026#34;: \u0026#34;Hello\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;Me\u0026#34;,\n  \u0026#34;publicationDate\u0026#34;: \u0026#34;today\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOops, we missed to add the title. But submit the request anyway. You should get a 500 error with the following message:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eAn exception occurred while executing \u0026#39;INSERT INTO book [...] VALUES [...]\u0026#39; with params [...]:\nSQLSTATE[23000]: Integrity constraint violation: 1048 Column \u0026#39;title\u0026#39; cannot be null\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDid you notice that the error was automatically serialized in JSON-LD and respect the Hydra Core vocabulary for errors?\nIt allows the client to easily extract useful information from the error. Anyway, it’s bad to get a SQL error when submitting\na request. It means that we doesn’t use a valid input, and \u003ca href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\"\u003eit’s a very bad and dangerous practice\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform comes with a bridge with \u003ca href=\"http://symfony.com/doc/current/validation.html\"\u003ethe Symfony Validator Component\u003c/a\u003e.\nAdding some of \u003ca href=\"http://symfony.com/doc/current/validation.html#supported-constraints\"\u003eits numerous validation constraints\u003c/a\u003e\n(or \u003ca href=\"http://symfony.com/doc/current/validation/custom_constraint.html\"\u003ecreating custom ones\u003c/a\u003e) to our entities is enough\nto get validate user submitted data. Let’s add some validation rules to our data model:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * A book.\n *\n * @ApiResource\n * @ORM\\Entity\n */\nclass Book\n{\n    /**\n     * @var int The id of this book.\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var string|null The ISBN number if this book (or null if doesn\u0026#39;t have one).\n     *\n     * @ORM\\Column(nullable=true)\n     * @Assert\\Isbn\n     */\n    private $isbn;\n\n    /**\n     * @var string The title of this book.\n     *\n     * @ORM\\Column\n     * @Assert\\NotBlank\n     */\n    private $title;\n\n    /**\n     * @var string The description of this book.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     * @Assert\\NotBlank\n     */\n    private $description;\n\n    /**\n     * @var string The author of this book.\n     *\n     * @ORM\\Column\n     * @Assert\\NotBlank\n     */\n    private $author;\n\n    /**\n     * @var \\DateTimeInterface The publication date of this book.\n     *\n     * @ORM\\Column(type=\u0026#34;datetime\u0026#34;)\n     * @Assert\\NotNull\n     */\n    private $publicationDate;\n\n    /**\n     * @var Review[] Available reviews for this book.\n     *\n     * @ORM\\OneToMany(targetEntity=\u0026#34;Review\u0026#34;, mappedBy=\u0026#34;book\u0026#34;)\n     */\n    private $reviews;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/Entity/Review.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * A review of a book.\n *\n * @ApiResource\n * @ORM\\Entity\n */\nclass Review\n{\n    /**\n     * @var int The id of this review.\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var int The rating of this review (between 0 and 5).\n     *\n     * @ORM\\Column(type=\u0026#34;smallint\u0026#34;)\n     * @Assert\\Range(min=0, max=5)\n     */\n    private $rating;\n\n    /**\n     * @var string the body of the review.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     * @Assert\\NotBlank\n     */\n    private $body;\n\n    /**\n     * @var string The author of the review.\n     *\n     * @ORM\\Column\n     * @Assert\\NotBlank\n     */\n    private $author;\n\n    /**\n     * @var \\DateTimeInterface The date of publication of this review.\n     *\n     * @ORM\\Column(type=\u0026#34;datetime\u0026#34;)\n     * @Assert\\NotBlank\n     */\n    private $publicationDate;\n\n    /**\n     * @var Book The book this review is about.\n     *\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;Book\u0026#34;, inversedBy=\u0026#34;reviews\u0026#34;)\n     * @Assert\\NotNull\n     */\n    private $book;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter updating the entities by adding those \u003ccode\u003e@Assert\\*\u003c/code\u003e annotations (as for Doctrine, you can use XML or YAML formats if you\nprefer), try again the previous \u003ccode\u003ePOST\u003c/code\u003e request.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eisbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.\ntitle: This value should not be blank.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou now get proper validation error messages, always serialized using the Hydra error format (API Problem is also supported).\nThose errors are easy to parse client-side. By adding the proper validation constraints, we also noticed that the provided\nISBN number isn’t valid…\u003c/p\u003e\n\n\u003cp\u003eHere we are! We have created a working and very powerful hypermedia REST API in a few minutes, and by writing only a few\nlines of PHP. But we only covered the basics.\u003c/p\u003e\n\n\u003ch2\u003eOther features\u003c/h2\u003e\n\n\u003cp\u003eThey are many more features to learn! Read \u003ca href=\"../core/index.jsonld\"\u003ethe full documentation\u003c/a\u003e to discover how to use them and how\nto extend API Platform to fit your needs.\nAPI Platform is incredibly efficient for prototyping and Rapid Application Development (RAD). But the framework is also\ndesigned to create complex web APIs far beyond simple CRUD apps. It benefits from \u003cstrong\u003estrong extension points\u003c/strong\u003e and is \u003cstrong\u003eis\ncontinuously optimized for performance.\u003c/strong\u003e It powers very high-traffic websites.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform can also be extended using PHP libraries and Symfony bundles.\u003c/p\u003e\n\n\u003cp\u003eHere is a non-exhaustive list of popular API Platform extensions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd \u003ca href=\"../core/fosuser-bundle.jsonld\"\u003ea user management system\u003c/a\u003e (FOSUser)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle\"\u003eSecure the API with JWT\u003c/a\u003e (LexikJwtAuthenticationBundle) or \u003ca href=\"https://github.com/FriendsOfSymfony/FOSOAuthServerBundle\"\u003eOAuth\u003c/a\u003e\n(FosOAuthServer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://foshttpcachebundle.readthedocs.org\"\u003eAdd a Varnish reverse proxy and adopt a expiration or invalidation HTTP cache strategy\u003c/a\u003e\n(FOSHttpCache)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dunglas/DunglasAngularCsrfBundle\"\u003eAdd CSRF protection when the API authentication relies on cookies\u003c/a\u003e\n(DunglasAngularCsrfBundle)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://symfony.com/doc/current/cookbook/email/email.html\"\u003eSend mails\u003c/a\u003e (Swift Mailer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/php-amqplib/RabbitMqBundle\"\u003eExecute async jobs and create micro-service architectures using RabbitMQ\u003c/a\u003e\n(RabbitMQBundle)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eKeep in mind that you can use your favorite client-side technology: API Platform is tested and approved with React, Angular\n1 \u0026amp; 2, Ionic and Swift but can work with any language able to send HTTP requests (even COBOL can do that).\u003c/p\u003e\n\n\u003cp\u003eTo go further, the API Platform team maintains a demo application showing more advanced use cases like leveraging serialization\ngroups, user management or JWT and OAuth authentication. \u003ca href=\"https://github.com/api-platform/demo\"\u003eCheckout the demo code source on GitHub\u003c/a\u003e\nand \u003ca href=\"https://demo.api-platform.com\"\u003ebrowse it online\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"testing.jsonld\"\u003eTesting And Specifying the API\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"}],"dateCreated":"2016-09-30T10:15:33+02:00","dateModified":"2016-09-30T11:19:24+02:00"}