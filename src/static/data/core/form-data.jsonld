{"@context":"http://schema.org","@type":"CreativeWork","name":"Accept application/x-www-form-urlencoded Form Data","text":"\u003ch1\u003eAccept \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e Form Data\u003c/h1\u003e\n\n\u003cp\u003eAPI Platform only supports raw documents as request input (encoded in JSON, XML, YAML…). This has many advantages including support of types and the ability to send back to the API documents originally retrieved through a \u003ccode\u003eGET\u003c/code\u003e request.\nBut sometimes - for instance, to support legacy clients - it is necessary to accept inputs encoded in the traditional \u003ca href=\"https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\"\u003e\u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e\u003c/a\u003e format (HTML form content type). This can easily be done using \u003ca href=\"events.jsonld\"\u003ethe powerful event system\u003c/a\u003e of the framework.\u003c/p\u003e\n\n\u003cp\u003eIn this tutorial, we will decorate the default \u003ccode\u003eDeserializeListener\u003c/code\u003e class to handle form data if applicable, and delegate to the built-in listener for other cases.\u003c/p\u003e\n\n\u003ch2\u003eCreate your \u003ccode\u003eDeserializeListener\u003c/code\u003e Decorator\u003c/h2\u003e\n\n\u003cp\u003eThis decorator is able to denormalize posted form data to the target object. In case of other format, it fallbacks to the original \u003ca href=\"https://github.com/api-platform/core/blob/91dc2a4d6eeb79ea8dec26b41e800827336beb1a/src/Bridge/Symfony/Bundle/Resources/config/api.xml#L85-L91\"\u003eDeserializeListener\u003c/a\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/EventListener/DeserializeListener.php\n\nnamespace AppBundle\\EventListener;\n\nuse ApiPlatform\\Core\\Exception\\RuntimeException;\nuse ApiPlatform\\Core\\Util\\RequestAttributesExtractor;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\GetResponseEvent;\nuse ApiPlatform\\Core\\EventListener\\DeserializeListener as DecoratedListener;\nuse Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface;\nuse ApiPlatform\\Core\\Serializer\\SerializerContextBuilderInterface;\n\nfinal class DeserializeListener\n{\n    private $decorated;\n    private $denormalizer;\n    private $serializerContextBuilder;\n\n    public function __construct(DenormalizerInterface $denormalizer, SerializerContextBuilderInterface $serializerContextBuilder, DecoratedListener $decorated)\n    {\n        $this-\u0026gt;denormalizer = $denormalizer;\n        $this-\u0026gt;serializerContextBuilder = $serializerContextBuilder;\n        $this-\u0026gt;decorated = $decorated;\n    }\n\n    public function onKernelRequest(GetResponseEvent $event) {\n        $request = $event-\u0026gt;getRequest();\n        if ($request-\u0026gt;isMethodSafe() || $request-\u0026gt;isMethod(Request::METHOD_DELETE)) {\n            return;\n        }\n\n        if (\u0026#39;form\u0026#39; === $request-\u0026gt;getContentType()) {\n            $this-\u0026gt;denormalizeFormRequest($request);\n        } else {\n            $this-\u0026gt;decorated-\u0026gt;onKernelRequest($event);\n        }\n    }\n\n    private function denormalizeFormRequest(Request $request)\n    {\n        try {\n            $attributes = RequestAttributesExtractor::extractAttributes($request);\n        } catch (RuntimeException $e) {\n            return;\n        }\n        $context = $this-\u0026gt;serializerContextBuilder-\u0026gt;createFromRequest($request, false, $attributes);\n        $data = $request-\u0026gt;request-\u0026gt;all();\n        $object = $this-\u0026gt;denormalizer-\u0026gt;denormalize($data, $attributes[\u0026#39;resource_class\u0026#39;], null, $context);\n        $request-\u0026gt;attributes-\u0026gt;set(\u0026#39;data\u0026#39;, $object);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCreate the Service Definition\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    # ...\n    app.listener.decorating_deserialize:\n        class: \u0026#39;AppBundle\\EventListener\\DeserializeListener\u0026#39;\n        arguments: [\u0026#39;@api_platform.serializer\u0026#39;, \u0026#39;@api_platform.serializer.context_builder\u0026#39;, \u0026#39;@api_platform.listener.request.deserialize\u0026#39;]\n        tags:\n            - { name: \u0026#39;kernel.event_listener\u0026#39;, event: \u0026#39;kernel.request\u0026#39;, method: \u0026#39;onKernelRequest\u0026#39;, priority: 2 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCleanup the Original Listener\u003c/h2\u003e\n\n\u003cp\u003eThe decorated DeserializeListener is called on demand, so it’s better to eliminate its own tags:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/AppBundle.php\n\nnamespace AppBundle;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass AppBundle extends Bundle\n{\n    public function build(ContainerBuilder $container)\n    {\n        parent::build($container);\n        $container-\u0026gt;addCompilerPass(new class implements CompilerPassInterface {\n            public function process(ContainerBuilder $container) {\n                $container\n                    -\u0026gt;findDefinition(\u0026#39;api_platform.listener.request.deserialize\u0026#39;);\n                    -\u0026gt;clearTags();\n            }\n        });\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n","author":[{"@type":"Person","Name":"Dmitrii","email":"dpoddubny@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"}],"dateCreated":"2016-09-06T11:45:57+03:00","dateModified":"2016-09-30T11:19:24+02:00"}