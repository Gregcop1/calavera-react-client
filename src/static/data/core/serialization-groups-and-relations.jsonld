{"@context":"http://schema.org","@type":"CreativeWork","name":"Serialization Groups and Relations","text":"\u003ch1\u003eSerialization Groups and Relations\u003c/h1\u003e\n\n\u003cp\u003eAPI Platform Core allows to choose which attributes of the resource are exposed during the normalization (read) and denormalization\n(write) process. It relies on the \u003ca href=\"https://symfony.com/doc/current/components/serializer.html#attributes-groups\"\u003eserialization (and deserialization) groups\u003c/a\u003e\nfeature of the Symfony Serializer component.\u003c/p\u003e\n\n\u003ch2\u003eConfiguration\u003c/h2\u003e\n\n\u003cp\u003eThe Symfony Serializer component allows to specify the definition of serialization using XML, YAML, or annotations. As annotations\nare really easy to understand, we will use them in this documentation.\u003c/p\u003e\n\n\u003cp\u003eHowever, if you don’t use the official distribution of API Platform, don’t forget to enable annotation support in the serializer\nconfiguration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yml\n\nframework:\n    serializer: { enable_annotations: true }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eUsing Serialization Groups\u003c/h2\u003e\n\n\u003cp\u003eSpecifying to the API system the groups to use is really simple:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(attributes={\n *     \u0026#34;normalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;read\u0026#34;}},\n *     \u0026#34;denormalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;write\u0026#34;}}\n * })\n */\nclass Book\n{\n    /**\n     * @Groups({\u0026#34;read\u0026#34;, \u0026#34;write\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Groups({\u0026#34;write\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith the config of the previous example, the \u003ccode\u003ename\u003c/code\u003e property will be accessible in read and write, but the \u003ccode\u003eauthor\u003c/code\u003e property\nwill be write only, therefore the \u003ccode\u003eauthor\u003c/code\u003e property will never be included in documents returned by the API.\u003c/p\u003e\n\n\u003cp\u003eThe value of the \u003ccode\u003enormalization_context\u003c/code\u003e is passed to the Symfony Serializer during the normalization process. In the same\nway, \u003ccode\u003edenormalization_context\u003c/code\u003e is used for denormalization.\nYou can configure groups as well as any Symfony Serializer option configurable through the context argument (e.g. the \u003ccode\u003eenable_max_depth\u003c/code\u003e\nkey when using \u003ca href=\"https://github.com/symfony/symfony/issues/17113\"\u003ethe \u003ccode\u003e@MaxDepth\u003c/code\u003e annotation\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eBuilt-in actions and the Hydra documentation generator will leverage the specified serialization and deserialization groups\nto give access only to exposed properties and to guess if they are readable and/or writable.\u003c/p\u003e\n\n\u003ch2\u003eUsing Different Serialization Groups per Operation\u003c/h2\u003e\n\n\u003cp\u003eIt is possible to specify normalization and denormalization contexts (as well as any other attribute) on a per operation\nbasis. API Platform Core will always use the most specific definition. For instance if normalization groups are set both\nat the resource level and at the operation level, the configuration set at the operation level will be used and the resource\nlevel ignored.\u003c/p\u003e\n\n\u003cp\u003eIn the following example we use different serialization groups for the \u003ccode\u003eGET\u003c/code\u003e and \u003ccode\u003ePUT\u003c/code\u003e operations:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(\n *     attributes={\u0026#34;normalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;get\u0026#34;}}},\n *     itemOperations={\n *          \u0026#34;get\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;GET\u0026#34;},\n *          \u0026#34;put\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;PUT\u0026#34;, \u0026#34;normalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;put\u0026#34;}}}\n *     }\n * )\n */\nclass Book\n{\n    /**\n     * @Groups({\u0026#34;get\u0026#34;, \u0026#34;put\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Groups({\u0026#34;get\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eauthor\u003c/code\u003e properties will be included in the document generated during a \u003ccode\u003eGET\u003c/code\u003e operation because the configuration\ndefined at the resource level is inherited. However the document generated when a \u003ccode\u003ePUT\u003c/code\u003e request will be received will only\ninclude the \u003ccode\u003ename\u003c/code\u003e property because of the specific configuration for this operation.\u003c/p\u003e\n\n\u003cp\u003eRefer to the documentation of \u003ca href=\"operations.jsonld\"\u003eoperations\u003c/a\u003e to learn more about the concept of operations.\u003c/p\u003e\n\n\u003ch2\u003eEmbedding Relations\u003c/h2\u003e\n\n\u003cp\u003eBy default, the serializer provided with API Platform Core represents relations between objects by \u003ca href=\"https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier\"\u003edereferenceables IRIs\u003c/a\u003e.\nThey allow to retrieve details of related objects by issuing an extra HTTP request.\u003c/p\u003e\n\n\u003cp\u003eIn the following JSON document, the relation from a book to an author is represented by an URI:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Book\u0026#34;,\n  \u0026#34;@id\u0026#34;: \u0026#34;/books/62\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n  \u0026#34;name\u0026#34;: \u0026#34;My awesome book\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;/people/59\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eNormalization\u003c/h3\u003e\n\n\u003cp\u003eTo improve the application’s performance, it is sometimes necessary to avoid issuing extra HTTP requests. It is possible\nto embed related objects (or only some of their properties) directly in the parent response trough serialization groups.\nBy using the following serialization groups annotations (\u003ccode\u003e@Groups\u003c/code\u003e), a JSON representation of the author is embedded in\nthe book response:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(attributes={\u0026#34;normalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;book\u0026#34;}}})\n */\nclass Book\n{\n    /**\n     * @Groups({\u0026#34;book\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Groups({\u0026#34;book\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Person.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource\n */\nclass Person\n{\n    /**\n     * ...\n     * @Groups({\u0026#34;book\u0026#34;})\n     */\n    public $name;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe generated JSON with previous settings will be like the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Book\u0026#34;,\n  \u0026#34;@id\u0026#34;: \u0026#34;/books/62\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n  \u0026#34;name\u0026#34;: \u0026#34;My awesome book\u0026#34;,\n  \u0026#34;author\u0026#34;: {\n    \u0026#34;@id\u0026#34;: \u0026#34;/people/59\u0026#34;,\n    \u0026#34;@type\u0026#34;: \u0026#34;Person\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;Kévin Dunglas\u0026#34;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn order to optimize such embedded relations, the default Doctrine data provider will automatically join entities on relations\nmarked as \u003ca href=\"http://doctrine-orm.readthedocs.io/projects/doctrine-orm/en/latest/reference/annotations-reference.html#manytoone\"\u003e\u003ccode\u003eEAGER\u003c/code\u003e\u003c/a\u003e\navoiding extra queries to be executed when serializing the sub-objects.\u003c/p\u003e\n\n\u003ch3\u003eDenormalization\u003c/h3\u003e\n\n\u003cp\u003eIt is also possible to embed a relation in \u003ccode\u003ePUT\u003c/code\u003e and \u003ccode\u003ePOST\u003c/code\u003e requests. To enable that feature, the serialization groups must be\nset the same way as normalization and the configuration should be like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;denormalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;book\u0026#34;}}})\n */\nclass Book\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe following rules apply when denormalizating embedded relations:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf a \u003ccode\u003e@id\u003c/code\u003e key is present in the embedded resource, the object corresponding to the given URI will be retrieved trough\nthe data provider and any changes in the embedded relation will be applied to that object.\u003c/li\u003e\n\u003cli\u003eIf no \u003ccode\u003e@id\u003c/code\u003e key exists, a new object will be created containing data provided in the embedded JSON document.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can create as relation embedding levels as you want.\u003c/p\u003e\n\n\u003ch3\u003eChanging the Serialization Context Dynamically\u003c/h3\u003e\n\n\u003cp\u003eLet’s imagine a resource where most fields can be managed by any user, but some can be managed by admin users only:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * @ApiResource(attributes={\n *     \u0026#34;normalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;book_output\u0026#34;}}}),\n *     \u0026#34;denormalization_context\u0026#34;={\u0026#34;groups\u0026#34;={\u0026#34;book_input\u0026#34;}}\n * })\n */\nclass Book\n{\n    // ...\n\n    /**\n     * This field can be managed by an admin only\n     *\n     * @var bool\n     *\n     * @Groups({\u0026#34;book_output\u0026#34;, \u0026#34;admin_input\u0026#34;})\n     */\n    private $active = false;\n\n    /**\n     * This field can be managed by any user\n     *\n     * @var string\n     *\n     * @Groups({\u0026#34;book_output\u0026#34;, \u0026#34;book_input\u0026#34;})\n     */\n    private $name;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAll entry points are the same for all users, so we should find a way to detect if authenticated user is admin, and if so\ndynamically add \u003ccode\u003eadmin_input\u003c/code\u003e to deserialization groups.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform implements a \u003ccode\u003eContextBuilder\u003c/code\u003e, which prepares the context for serialization \u0026amp; deserialization. Let’s\n\u003ca href=\"http://symfony.com/doc/current/service_container/service_decoration.html\"\u003edecorate this service\u003c/a\u003e to override the\n\u003ccode\u003ecreateFromRequest\u003c/code\u003e method:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yml\"\u003e# src/AppBundle/Resources/config/services.yml\n\nservices:\n    app.serializer.builder.book:\n        decorates: api_platform.serializer.context_builder\n        class: AppBundle\\Serializer\\BookContextBuilder\n        arguments: [\u0026#39;@app.serializer.builder.book.inner\u0026#39;, \u0026#39;@security.authorization_checker\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Serializer/BookContextBuilder.php\n\nnamespace AppBundle\\Serializer;\n\nuse ApiPlatform\\Core\\Serializer\\SerializerContextBuilderInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface;\n\nfinal class BookContextBuilder implements SerializerContextBuilderInterface\n{\n    private $decorated;\n    private $authorizationChecker;\n\n    public function __construct(SerializerContextBuilderInterface $decorated, AuthorizationCheckerInterface $authorizationChecker)\n    {\n        $this-\u0026gt;decorated = $decorated;\n        $this-\u0026gt;authorizationChecker = $authorizationChecker;\n    }\n\n    public function createFromRequest(Request $request, bool $normalization, array $extractedAttributes = null) : array\n    {\n        $context = $this-\u0026gt;decorated-\u0026gt;createFromRequest($request, $normalization, $extractedAttributes);\n        if ($this-\u0026gt;authorizationChecker-\u0026gt;isGranted(\u0026#39;ROLE_ADMIN\u0026#39;) \u0026amp;\u0026amp; false === $normalization) {\n            $context[\u0026#39;groups\u0026#39;][] = \u0026#39;admin_input\u0026#39;;\n        }\n\n        return $context;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf the user has \u003ccode\u003eROLE_ADMIN\u003c/code\u003e permission, \u003ccode\u003eadmin_input\u003c/code\u003e group will be dynamically added to the denormalization context.\nThe variable \u003ccode\u003e$normalization\u003c/code\u003e lets you check whether the context is for normalization (if true) or denormalization.\u003c/p\u003e\n\n\u003ch2\u003eName Conversion\u003c/h2\u003e\n\n\u003cp\u003eThe Serializer Component provides a handy way to map PHP field names to serialized names. See the related \u003ca href=\"http://symfony.com/doc/master/components/serializer.html#converting-property-names-when-serializing-and-deserializing\"\u003eSymfony documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo use this feature, declare a new service with id \u003ccode\u003eapp.name_converter\u003c/code\u003e. For example, you can convert \u003ccode\u003eCamelCase\u003c/code\u003e to\n\u003ccode\u003esnake_case\u003c/code\u003e with the following configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    app.name_converter:\n        class: Symfony\\Component\\Serializer\\NameConverter\\CamelCaseToSnakeCaseNameConverter\n        public: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yml\n\napi_platform:\n    name_converter: app.name_converter\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eEntity Identifier Case\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform is able to guess the entity identifier using \u003ca href=\"http://doctrine-orm.readthedocs.org/en/latest/reference/basic-mapping.html#identifiers-primary-keys\"\u003eDoctrine metadata\u003c/a\u003e.\nIt also supports composite identifiers.\u003c/p\u003e\n\n\u003cp\u003eIf Doctrine ORM is not used, the identifier must be marked explicitly using the \u003ccode\u003eidentifier\u003c/code\u003e attribute of the \u003ccode\u003eApiPlatform\\Core\\Annotation\\ApiProperty\u003c/code\u003e\nannotation.\u003c/p\u003e\n\n\u003cp\u003eMost of the time, the property identifying the entity is not included in the returned document but is included as a part\nof the URI contained in the \u003ccode\u003e@id\u003c/code\u003e field. So in the \u003ccode\u003e/apidoc\u003c/code\u003e endpoint the identifier will not appear in the properties list.\u003c/p\u003e\n\n\u003cp\u003eHowever, when using composite identifier, properties composing the identifier are included in the API response and in the\ndocumentation.\u003c/p\u003e\n\n\u003ch3\u003eWritable Entity Identifier\u003c/h3\u003e\n\n\u003cp\u003eIn some cases, you will want to set the identifier of a resource from the client (like a slug for example).\nIn this case the identifier property must become a writable class property in the \u003ccode\u003e/apidoc\u003c/code\u003e endpoint.\u003c/p\u003e\n\n\u003cp\u003eTo do this you simply have to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a setter for identifier in the entity.\u003c/li\u003e\n\u003cli\u003eAdd the denormalization group to the property if you use a specific denormalization group.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eEmbedding the Context\u003c/h2\u003e\n\n\u003cp\u003eBy default, the generated \u003ca href=\"https://www.w3.org/TR/json-ld/#the-context\"\u003eJSON-LD context\u003c/a\u003e (\u003ccode\u003e@context\u003c/code\u003e) is only reference by\nan IRI. A client supporting JSON-LD must send a second HTTP request to retrieve it:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Book\u0026#34;,\n  \u0026#34;@id\u0026#34;: \u0026#34;/books/62\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n  \u0026#34;name\u0026#34;: \u0026#34;My awesome book\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;/people/59\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can configure API Platform Core to embed the JSON-LD context in the root document like the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: {\n    \u0026#34;@vocab\u0026#34;: \u0026#34;http://localhost:8000/apidoc#\u0026#34;,\n    \u0026#34;hydra\u0026#34;: \u0026#34;http://www.w3.org/ns/hydra/core#\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;http://schema.org/name\u0026#34;,\n    \u0026#34;author\u0026#34;: \u0026#34;http://schema.org/author\u0026#34;\n  },\n  \u0026#34;@id\u0026#34;: \u0026#34;/books/62\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;Book\u0026#34;,\n  \u0026#34;name\u0026#34;: \u0026#34;My awesome book\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;/people/59\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTo do so, use the following configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;jsonld_embed_context\u0026#34;=true})\n */\nclass Book\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"filters.jsonld\"\u003eFilters\u003c/a\u003e\nNext chapter: \u003ca href=\"operation-path-naming.jsonld\"\u003eOperation Path Naming\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Paul Le Corre","email":"paul@lecorre.me"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Vincent CHALAMON","email":"vincentchalamon@gmail.com"},{"@type":"Person","Name":"Ener-Getick","email":"egetick@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Alexis Degrugillier","email":"aledeg@users.noreply.github.com"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","Name":"Théo FIDRY","email":"theo.fidry@gmail.com"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-10-07T13:45:32+01:00"}