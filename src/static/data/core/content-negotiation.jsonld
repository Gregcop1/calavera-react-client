{"@context":"http://schema.org","@type":"CreativeWork","name":"Content Negotiation","text":"\u003ch1\u003eContent Negotiation\u003c/h1\u003e\n\n\u003cp\u003eThe API system has builtin \u003ca href=\"https://en.wikipedia.org/wiki/Content_negotiation\"\u003econtent negotiation\u003c/a\u003e capabilities.\nIt leverages the \u003ca href=\"https://github.com/willdurand/Negotiation\"\u003e\u003ccode\u003ewilldurand/negotiation\u003c/code\u003e\u003c/a\u003e library.\u003c/p\u003e\n\n\u003cp\u003eBy default, only the \u003ca href=\"https://json-ld.org\"\u003eJSON-LD\u003c/a\u003e format is enabled. However API Platform Core supports for formats included\nin the underlying \u003ca href=\"http://symfony.com/doc/current/components/serializer.html\"\u003eSymfony Serializer component\u003c/a\u003e can be enabled\nthrough the configuration. It supports XML, raw JSON and CSV (since Symfony 3.2).\u003c/p\u003e\n\n\u003cp\u003eAPI Platform Core will automatically detect the best resolving format depending on:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eenabled formats (link to docs for this / see below)\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003eAccept\u003c/code\u003e HTTP header\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf the client requested format is not supported by the server, the response format will be the first format defined in the \u003ccode\u003eformats\u003c/code\u003e configuration key (see below).\nAn example using the builtin XML support is available in Behat specs: \u003ca href=\"https://github.com/api-platform/core/blob/master/features/content_negotiation.feature\"\u003ehttps://github.com/api-platform/core/blob/master/features/content_negotiation.feature\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe API Platform content negotiation system is extensible. Support for other formats (such as \u003ca href=\"http://stateless.co/hal_specification.html\"\u003eHAL\u003c/a\u003e\nor \u003ca href=\"http://jsonapi.org/\"\u003eJSONAPI\u003c/a\u003e)\ncan be added by [creating and registering appropriate encoders and, sometimes, normalizers](). Adding support for other\nstandard hypermedia formats upstream is very welcome. Don’t hesitate to contribute by adding your encoders and normalizers\nto API Platform Core.\u003c/p\u003e\n\n\u003ch2\u003eEnabling Several Formats\u003c/h2\u003e\n\n\u003cp\u003eThe first required step is to configure allowed formats. The following configuration will enable the support of XML (built-in)\nand of a custom format called \u003ccode\u003emyformat\u003c/code\u003e and having \u003ccode\u003eapplication/vnd.myformat\u003c/code\u003e as \u003ca href=\"https://en.wikipedia.org/wiki/Media_type\"\u003eMIME type\u003c/a\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yml\n\napi_platform:\n    # ...\n    formats:\n        jsonld:   [\u0026#39;application/ld+json\u0026#39;]\n        xml:      [\u0026#39;application/xml\u0026#39;, \u0026#39;text/xml\u0026#39;]\n        myformat: [\u0026#39;application/vnd.myformat\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBecause the Symfony Serializer component is able to serialize objects in XML, sending an \u003ccode\u003eAccept\u003c/code\u003e HTTP header with the\n\u003ccode\u003etext/xml\u003c/code\u003e string as value is enough to retrieve XML documents from our API. However API Platform knows nothing about the\n\u003ccode\u003emyformat\u003c/code\u003e format. We need to register an encoder and optionally a normalizer for this format.\u003c/p\u003e\n\n\u003ch2\u003eRegistering a Custom Serializer\u003c/h2\u003e\n\n\u003cp\u003eIf you are adding support for a format not supported by default by API Platform nor by the Symfony Serializer Component,\nyou need to create custom encoder, decoder and eventually a normalizer and a denormalizer. Refer to the\nSymfony documentation to learn \u003ca href=\"https://symfony.com/doc/current/cookbook/serializer.html#adding-normalizers-and-encoders\"\u003ehow to create and register such classes\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform Core will automatically call the serializer with your defined format name (\u003ccode\u003emyformat\u003c/code\u003e in previous examples)\nas \u003ccode\u003eformat\u003c/code\u003e parameter during the deserialization process. Then it will return the result to the client with the asked MIME\ntype using its built-in responder.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"events.jsonld\"\u003eThe Event System\u003c/a\u003e\nNext chapter: \u003ca href=\"external-vocabularies.jsonld\"\u003eUsing External JSON-LD Vocabularies\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Amrouche Hamza","email":"laharl.moon@gmail.com"},{"@type":"Person","Name":"Amrouche Hamza","email":"laharl.moon@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-09-23T11:43:19+02:00"}