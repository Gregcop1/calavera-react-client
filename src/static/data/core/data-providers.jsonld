{"@context":"http://schema.org","@type":"CreativeWork","name":"Data Providers","text":"\u003ch1\u003eData Providers\u003c/h1\u003e\n\n\u003cp\u003eTo retrieve data exposed by the API, API Platform uses classes called \u003cstrong\u003edata providers\u003c/strong\u003e. A data provider using \u003ca href=\"http://www.doctrine-project.org/projects/orm.html\"\u003eDoctrine\nORM\u003c/a\u003e to retrieve data from a database is included with the library and\nis enabled by default. This data provider natively supports paged collections and filters. It can be used as is and fits\nperfectly with common usages.\u003c/p\u003e\n\n\u003cp\u003eBut sometime, you want to retrieve data from other sources such as another persistence layer, a webservice, ElasticSearch\nor MongoDB.\nCustom data providers can be used to do so. A project can include as many data providers as it needs. The first able to\nretrieve data for a given resource will be used.\u003c/p\u003e\n\n\u003cp\u003eFor a given resource, you can implement two kind of interfaces:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe \u003ca href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/CollectionDataProviderInterface.php\"\u003e\u003ccode\u003eCollectionDataProviderInterface\u003c/code\u003e\u003c/a\u003e\nis used when fetching a collection.\u003c/li\u003e\n\u003cli\u003ethe \u003ca href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/ItemDataProviderInterface.php\"\u003e\u003ccode\u003eItemDataProviderInterface\u003c/code\u003e\u003c/a\u003e\nis used when fetching items.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the following examples we will create custom data providers for an entity class class called \u003ccode\u003eAppBundle\\Entity\\BlogPost\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCustom Collection Data Provider\u003c/h2\u003e\n\n\u003cp\u003eFirst, your \u003ccode\u003eBlogPostCollectionDataProvider\u003c/code\u003e has to implement the \u003ca href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/CollectionDataProviderInterface.php\"\u003e\u003ccode\u003eCollectionDataProviderInterface\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003egetCollection\u003c/code\u003e method must return an \u003ccode\u003earray\u003c/code\u003e, a \u003ccode\u003eTraversable\u003c/code\u003e or a \u003ca href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/PaginatorInterface.php\"\u003e\u003ccode\u003eApiPlatform\\Core\\DataProvider\\PaginatorInterface\u003c/code\u003e\u003c/a\u003e instance.\nIf no data is available, you should return an empty array.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/DataProvider/BlogPostCollectionDataProvider.php\n\nnamespace AppBundle\\DataProvider;\n\nuse AppBundle\\Entity\\BlogPost;\nuse ApiPlatform\\Core\\DataProvider\\CollectionDataProviderInterface;\nuse ApiPlatform\\Core\\Exception\\ResourceClassNotSupportedException;\n\nfinal class BlogPostCollectionDataProvider implements CollectionDataProviderInterface\n{\n    public function getCollection(string $resourceClass, string $operationName = null)\n    {\n        if (BlogPost::class !== $resourceClass) {\n            throw new ResourceClassNotSupportedException();\n        }\n\n        // Retrieve the blog post collection from somewhere\n        return [new BlogPost(1), new BlogPost(2)];\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen declare a Symfony service, for example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    blog_post.collection_data_provider:\n        class: \u0026#39;AppBundle\\DataProvider\\BlogPostCollectionDataProvider\u0026#39;\n        tags:\n            -  { name: \u0026#39;api_platform.collection_data_provider\u0026#39;, priority: 2 }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTagging the service with the tag \u003ccode\u003eapi_platform.collection_data_provider\u003c/code\u003e will enable API Platform Core to automatically\nregister and use this data provider. The optional attribute \u003ccode\u003epriority\u003c/code\u003e allows to define the order in wich are called the\ndata providers. The first data provider not throwing a \u003ccode\u003eApiPlatform\\Core\\Exception\\ResourceClassNotSupportedException\u003c/code\u003e\nwill be used.\u003c/p\u003e\n\n\u003ch2\u003eCustom Item Data Provider\u003c/h2\u003e\n\n\u003cp\u003eThe process is similar for item data providers. Create a \u003ccode\u003eBlogPostItemDataProvider\u003c/code\u003e implementing the \u003ca href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/ItemDataProviderInterface.php\"\u003e\u003ccode\u003eItemDataProviderInterface\u003c/code\u003e\u003c/a\u003e\ninterface:\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003egetItem\u003c/code\u003e method can return \u003ccode\u003enull\u003c/code\u003e if no result has been found.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/DataProvider/BlogPostItemDataProvider.php\n\nnamespace AppBundle\\DataProvider;\n\nuse AppBundle\\Entity\\BlogPost;\nuse ApiPlatform\\Core\\DataProvider\\ItemDataProviderInterface;\nuse ApiPlatform\\Core\\Exception\\ResourceClassNotSupportedException;\n\nfinal class BlogPostItemDataProvider implements ItemDataProviderInterface\n{\n    public function getItem(string $resourceClass, $id, string $operationName = null, bool $fetchData = false)\n    {\n        if (BlogPost::class !== $resourceClass) {\n          throw new ResourceClassNotSupportedException();\n        }\n\n        // Retrieve the blog post item from somewhere\n        return new BlogPost($id);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe tag to use for item data providers is \u003ccode\u003eapi_platform.item_data_provider\u003c/code\u003e. As for collection data providers, the \u003ccode\u003epriority\u003c/code\u003e\nattribute can be used to order providers.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    blog_post.collection_data_provider:\n        class: \u0026#39;AppBundle\\DataProvider\\BlogPostCollectionDataProvider\u0026#39;\n        tags:\n            -  { name: \u0026#39;api_platform.item_data_provider\u0026#39; }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"core/extending-jsonld-context.jsonld\"\u003eExtending JSON-LD context\u003c/a\u003e\nNext chapter: \u003ca href=\"security.jsonld\"\u003eSecurity\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Antoine Bluchet","email":"soyuka@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","Name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Stefan Schüller","email":"sschueller@techdroid.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Markus Mächler","email":"markus.maechler@bithost.ch"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-10-11T10:12:14+02:00"}