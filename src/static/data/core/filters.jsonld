{"@context":"http://schema.org","@type":"CreativeWork","name":"Filters","text":"\u003ch1\u003eFilters\u003c/h1\u003e\n\n\u003cp\u003eAPI Platform Core provides a generic system to apply filters on collections. Useful filters for the Doctrine ORM are provided\nwith the library. You can also create custom filters that would fit your specific needs.\nYou can also add filtering support to your custom \u003ca href=\"data-providers.jsonld\"\u003edata providers\u003c/a\u003e by implementing interfaces provided\nby the library.\u003c/p\u003e\n\n\u003cp\u003eBy default, all filters are disabled. They must be enabled explicitly.\u003c/p\u003e\n\n\u003cp\u003eWhen a filter is enabled, it is automatically documented as a \u003ccode\u003ehydra:search\u003c/code\u003e property in the collection response. It also\nautomatically appears in the \u003ca href=\"nelmio-api-doc.jsonld\"\u003eNelmioApiDoc documentation\u003c/a\u003e if it is available.\u003c/p\u003e\n\n\u003ch2\u003eSearch Filter\u003c/h2\u003e\n\n\u003cp\u003eIf Doctrine ORM support is enabled, adding filters is as easy as registering a filter service in your \u003ccode\u003eapp/config/services.yml\u003c/code\u003e\nfile and adding an attribute to your resource configuration.\u003c/p\u003e\n\n\u003cp\u003eThe search filter supports \u003ccode\u003eexact\u003c/code\u003e, \u003ccode\u003epartial\u003c/code\u003e, \u003ccode\u003estart\u003c/code\u003e, \u003ccode\u003eend\u003c/code\u003e, and \u003ccode\u003eword_start\u003c/code\u003e matching strategies:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epartial\u003c/code\u003e strategy uses \u003ccode\u003eLIKE %text%\u003c/code\u003e to search for fields that containing the text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estart\u003c/code\u003e strategy uses \u003ccode\u003eLIKE text%\u003c/code\u003e to search for fields that starts with text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eend\u003c/code\u003e strategy uses \u003ccode\u003eLIKE %text\u003c/code\u003e to search for fields that ends with text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eword_start\u003c/code\u003e strategy uses \u003ccode\u003eLIKE text% OR LIKE % text%\u003c/code\u003e to search for fields that contains the word starting with \u003ccode\u003etext\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePrepend the letter \u003ccode\u003ei\u003c/code\u003e to the filter if you want it to be case insensitive. For example \u003ccode\u003eipartial\u003c/code\u003e or \u003ccode\u003eiexact\u003c/code\u003e. Note that\nthis will use the \u003ccode\u003eLOWER\u003c/code\u003e function and \u003cstrong\u003ewill\u003c/strong\u003e impact performance \u003ca href=\"performance.jsonld#search-filter\"\u003eif there is no proper index\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eCase insensitivity may already be enforced at the database level depending on the \u003ca href=\"https://en.wikipedia.org/wiki/Collation\"\u003ecollation\u003c/a\u003e\nused. If you are using MySQL, note that the commonly used \u003ccode\u003eutf8_unicode_ci\u003c/code\u003e collation (and its sibling \u003ccode\u003eutf8mb4_unicode_ci\u003c/code\u003e)\nare already case insensitive, as indicated by the \u003ccode\u003e_ci\u003c/code\u003e part in their names.\u003c/p\u003e\n\n\u003cp\u003eIn the following example, we will see how to allow the filtering of a list of e-commerce offers:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.search_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.search_filter\u0026#39;\n        arguments: [ { id: \u0026#39;exact\u0026#39;, price: \u0026#39;exact\u0026#39;, name: \u0026#39;partial\u0026#39; } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.search\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;offer.search\u0026#34;}})\n */\nclass Offer\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://localhost:8000/api/offers?price=10\u003c/code\u003e will return all offers with a price being exactly \u003ccode\u003e10\u003c/code\u003e.\n\u003ccode\u003ehttp://localhost:8000/api/offers?name=shirt\u003c/code\u003e will returns all offer with a description containing the word “shirt”.\u003c/p\u003e\n\n\u003cp\u003eFilters can be combined together: \u003ccode\u003ehttp://localhost:8000/api/offers?price=10\u0026amp;name=shirt\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is possible to filter on relations too:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.search_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.search_filter\u0026#39;\n        arguments: [ { id: \u0026#39;exact\u0026#39;, price: \u0026#39;exact\u0026#39;, name: \u0026#39;partial\u0026#39; } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.search\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith this service definition, it is possible to find all offers belonging to the product identified by a given IRI.\nTry the following: \u003ccode\u003ehttp://localhost:8000/api/offers?product=/api/products/12\u003c/code\u003e\nUsing a numeric ID is also supported: \u003ccode\u003ehttp://localhost:8000/api/offers?product=12\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003ePrevious URLs will return all offers for the product having the following IRI as JSON-LD identifier (\u003ccode\u003e@id\u003c/code\u003e): \u003ccode\u003ehttp://localhost:8000/api/products/12\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDate Filter\u003c/h2\u003e\n\n\u003cp\u003eThe date filter allows to filter a collection by date intervals.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?property[\u0026lt;after|before\u0026gt;]=value\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe value can take any date format supported by the \u003ca href=\"http://php.net/manual/en/datetime.construct.php\"\u003e\u003ccode\u003e\\DateTime\u003c/code\u003e constructor\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs others filters, the date filter must be explicitly enabled:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    # Enable date filter for for the property \u0026#34;dateProperty\u0026#34; of the resource \u0026#34;offer\u0026#34;\n    offer.date_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.date_filter\u0026#39;\n        arguments: [ { dateProperty: ~ } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.date\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;offer.search\u0026#34;, \u0026#34;offer.date\u0026#34;}})\n */\nclass Offer\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eManaging \u003ccode\u003enull\u003c/code\u003e Values\u003c/h3\u003e\n\n\u003cp\u003eThe date filter is able to deal with date properties having \u003ccode\u003enull\u003c/code\u003e values.\nFour behaviors are available at the property level of the filter:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003cth\u003eStrategy to set\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eUse the default behavior of the DBMS\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eExclude items\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL\u003c/code\u003e (\u003ccode\u003eexclude_null\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eConsider items as oldest\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_BEFORE\u003c/code\u003e (\u003ccode\u003einclude_null_before\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eConsider items as youngest\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_AFTER\u003c/code\u003e (\u003ccode\u003einclude_null_after\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eFor instance, exclude entries with a property value of \u003ccode\u003enull\u003c/code\u003e, with the following service definition:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.date_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.date_filter\u0026#39;\n        arguments: [ { dateProperty: \u0026#39;exclude_null\u0026#39; } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.date\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you use a service definition format other than YAML, you can use the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL\u003c/code\u003e\nconstant directly.\u003c/p\u003e\n\n\u003ch2\u003eBoolean Filter\u003c/h2\u003e\n\n\u003cp\u003eThe boolean filter allow you to search on boolean fields and value.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?property=[on|off|true|false|0|1]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can either use TRUE or true, the parameters are case insensitive.\u003c/p\u003e\n\n\u003cp\u003eEnable the filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.boolean_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.boolean_filter\u0026#39;\n        arguments: [ { isAvailableGenericallyInMyCountry: ~ } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.boolean\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;offer.search\u0026#34;, \u0026#34;offer.date\u0026#34;, \u0026#34;offer.boolean\u0026#34;}})\n */\nclass Offer\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGiven that the collection endpoint is \u003ccode\u003e/offers\u003c/code\u003e, you can filter offers by boolean  with the following query: \u003ccode\u003e/offers?isAvailableGenericallyInMyCountry=true\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt will return all offers where \u003ccode\u003eisAvailableGenericallyInMyCountry\u003c/code\u003e equals \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eNumeric Filter\u003c/h2\u003e\n\n\u003cp\u003eThe boolean filter allow you to search on numeric fields and value.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?property=int|bigint|decimal...\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eEnable the filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.numeric_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.numeric_filter\u0026#39;\n        arguments: [ { sold: ~ } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.numeric\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;offer.search\u0026#34;, \u0026#34;offer.date\u0026#34;, \u0026#34;offer.boolean\u0026#34;, \u0026#34;offer.numeric\u0026#34;}})\n */\nfinal class Offer\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGiven that the collection endpoint is \u003ccode\u003e/offers\u003c/code\u003e, you can filter offers by boolean  with the following query: \u003ccode\u003e/offers?sold=1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt will return all offers with \u003ccode\u003esold\u003c/code\u003e equals 1\u003c/p\u003e\n\n\u003ch2\u003eOrder Filter\u003c/h2\u003e\n\n\u003cp\u003eThe order filter allows to order a collection against the given properties.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?order[property]=\u0026lt;asc|desc\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eEnable the filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.order_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.order_filter\u0026#39;\n        arguments: [ { id: ~, name: ~ } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.order\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;offer.search\u0026#34;, \u0026#34;offer.date\u0026#34;, \u0026#34;offer.order\u0026#34;}})\n */\nclass Offer\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGiven that the collection endpoint is \u003ccode\u003e/offers\u003c/code\u003e, you can filter offers by name in ascending order and then by ID in descending\norder with the following query: \u003ccode\u003e/offers?order[name]=desc\u0026amp;order[id]=asc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBy default, whenever the query does not specify the direction explicitly (e.g: \u003ccode\u003e/offers?order[name]\u0026amp;order[id]\u003c/code\u003e), filters\nwill not be applied unless you configure a default order direction to use:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.order_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.order_filter\u0026#39;\n        arguments: [ { id: \u0026#39;ASC\u0026#39;, name: \u0026#39;DESC\u0026#39; } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.order\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eUsing a Custom Order Query Parameter Name\u003c/h3\u003e\n\n\u003cp\u003eA conflict will occur if \u003ccode\u003eorder\u003c/code\u003e is also the name of a property with the search filter enabled.\nLuckily, the query parameter name to use is configurable:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yml\n\napi_platform:\n    collection:\n        order_parameter_name: \u0026#39;_order\u0026#39; # the URL query parameter to use is now \u0026#34;_order\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eFiltering on Nested Properties\u003c/h2\u003e\n\n\u003cp\u003eSometimes, you need to be able to perform filtering based on some linked resources (on the other side of a relation). All\nbuilt-in filters support nested properties using the dot (\u003ccode\u003e.\u003c/code\u003e) syntax, e.g.:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.search_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.search_filter\u0026#39;\n        arguments: [ { product.color: \u0026#39;exact\u0026#39; } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.search\u0026#39; } ]\n\n    offer.order_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.order_filter\u0026#39;\n        arguments: [ { product.releaseDate: ~ } ]\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.order\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe above allows you to find offers by their respective product’s color: \u003ccode\u003ehttp://localhost:8000/api/offers?product.color=red\u003c/code\u003e,\nor order offers by the product’s release date: \u003ccode\u003ehttp://localhost:8000/api/offers?order[product.releaseDate]=desc\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eEnabling a Filter for All Properties of a Resource\u003c/h2\u003e\n\n\u003cp\u003eAs we have seen in previous examples, properties where filters can be applied must be explicitly declared. If you don’t\ncare about security and performance (e.g. an API with restricted access), it is also possible to enable built-in filters\nfor all properties:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    # Filter enabled for all properties\n    offer.order_filter:\n        parent:    \u0026#39;api_platform.doctrine.orm.order_filter\u0026#39;\n        arguments: [ ~ ] # This line can also be omitted\n        tags:      [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.order\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote: Filters on nested properties must still be enabled explicitly, in order to keep things sane\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRegardless of this option, filters can by applied on a property only if:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe property exists\u003c/li\u003e\n\u003cli\u003ethe value is supported (ex: \u003ccode\u003easc\u003c/code\u003e or \u003ccode\u003edesc\u003c/code\u003e for the order filters).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt means that the filter will be \u003cstrong\u003esilently\u003c/strong\u003e ignored if the property:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003edoes not exist\u003c/li\u003e\n\u003cli\u003eis not enabled\u003c/li\u003e\n\u003cli\u003ehas an invalid value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreating Custom Filters\u003c/h2\u003e\n\n\u003cp\u003eCustom filters can be written by implementing the \u003ccode\u003eApiPlatform\\Core\\Api\\FilterInterface\u003c/code\u003e\ninterface.\u003c/p\u003e\n\n\u003cp\u003eIf you use \u003ca href=\"data-providers.jsonld\"\u003ecustom data providers\u003c/a\u003e, they must support filtering and be aware of active filters to work\nproperly.\u003c/p\u003e\n\n\u003ch3\u003eCreating Custom Doctrine ORM Filters\u003c/h3\u003e\n\n\u003cp\u003eDoctrine ORM filters must implement the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\FilterInterface\u003c/code\u003e.\nThey can interact directly with the Doctrine \u003ccode\u003eQueryBuilder\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA convenient abstract class is also shipped with the bundle: \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\AbstractFilter\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eOverriding Extraction of Properties from the Request\u003c/h3\u003e\n\n\u003cp\u003eYou can change the way the filter parameters are extracted from the request. This can be done by overriding the \u003ccode\u003eextractProperties(\\Symfony\\Component\\HttpFoundation\\Request $request)\u003c/code\u003e\nmethod.\u003c/p\u003e\n\n\u003cp\u003eIn the following example, we will completely change the syntax of the order filter to be the following: \u003ccode\u003e?filter[order][property]\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Filter/CustomOrderFilter.php\n\nnamespace AppBundle\\Filter;\n\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nfinal class CustomOrderFilter extends OrderFilter\n{\n    protected function extractProperties(Request $request)\n    {\n        $filter = $request-\u0026gt;query-\u0026gt;get(\u0026#39;filter[order]\u0026#39;, []);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFinally, register the custom filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    offer.custom_order_filter:\n        class: \u0026#39;AppBundle\\Filter\\CustomOrderFilter\u0026#39;\n        tags:  [ { name: \u0026#39;api_platform.filter\u0026#39;, id: \u0026#39;offer.order\u0026#39; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"operations.jsonld\"\u003eOperations\u003c/a\u003e\nNext chapter: \u003ca href=\"serialization-groups-and-relations.jsonld\"\u003eSerialization Groups and Relations\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Mbechezi Mlanawo","email":"Shine-neko@users.noreply.github.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Labesse Kévin","email":"kevin@labesse.me"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Antoine Bluchet","email":"soyuka@users.noreply.github.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-10-10T13:23:03+02:00"}